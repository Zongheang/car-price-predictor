import pandas as pd

car = pd.read_csv('quikr_car.csv')

car.head(10)

car.shape

car.info()

car['year'].unique()

car['Price'].unique()

car['kms_driven'].unique()

car['fuel_type'].unique()

# back-up dataset

backup = car.copy()

car = car[car['year'].str.isnumeric()]

car['year'] = car['year'].astype(int)

car.info()

car=car[car['Price']!='Ask For Price']

car['Price']=car['Price'].str.replace(',','').astype(int)

car['kms_driven']=car['kms_driven'].str.split().str.get(0).str.replace(',','')

car=car[car['kms_driven'].str.isnumeric()]

car['kms_driven']=car['kms_driven'].astype(int)

car=car[~car['fuel_type'].isna()]

car.shape

car['name']=car['name'].str.split().str.slice(start=0,stop=3).str.join(' ')

car=car.reset_index(drop=True)

# cleaned dataset

car

car.to_csv('Cleaned_Car_data.csv')

car.info()

car.describe(include='all')

car=car[car['Price']<6000000]

car['company'].unique()


import seaborn as sns
import matplotlib.pyplot as plt

plt.subplots(figsize=(15,7))
ax=sns.boxplot(x='company',y='Price',data=car)
ax.set_xticklabels(ax.get_xticklabels(),rotation=40,ha='right')
plt.show()

plt.subplots(figsize=(20,10))
ax=sns.swarmplot(x='year',y='Price',data=car)
ax.set_xticklabels(ax.get_xticklabels(),rotation=40,ha='right')
plt.show()

sns.relplot(x='kms_driven',y='Price',data=car,height=7,aspect=1.5)

plt.subplots(figsize=(14,7))
sns.boxplot(x='fuel_type',y='Price',data=car)

ax=sns.relplot(x='company',y='Price',data=car,hue='fuel_type',size='year',height=7,aspect=2)
ax.set_xticklabels(rotation=40,ha='right')

X=car[['name','company','year','kms_driven','fuel_type']]
y=car['Price']

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)

from sklearn.linear_model import LinearRegression

from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline
from sklearn.metrics import r2_score

ohe=OneHotEncoder()
ohe.fit(X[['name','company','fuel_type']])

column_trans = make_column_transformer(
    (OneHotEncoder(categories=ohe.categories_), ['name', 'company', 'fuel_type']),
    remainder='passthrough',
    force_int_remainder_cols=False
)

# Linear Regression Model

lr=LinearRegression()

# Making a pipeline

pipe=make_pipeline(column_trans,lr)


# Fitting the model

pipe.fit(X_train,y_train)

y_pred=pipe.predict(X_test)


# Checking R2 Score

r2_score(y_test,y_pred)

# Finding the model with a random state of TrainTestSplit where the model was found to give almost 0.92 as r2_score

scores=[]
for i in range(1000):
    X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.1,random_state=i)
    lr=LinearRegression()
    pipe=make_pipeline(column_trans,lr)
    pipe.fit(X_train,y_train)
    y_pred=pipe.predict(X_test)
    scores.append(r2_score(y_test,y_pred))

import numpy as np
np.argmax(scores)

scores[np.argmax(scores)]

pipe.predict(pd.DataFrame(columns=X_test.columns,data=np.array(['Maruti Suzuki Swift','Maruti',2019,100,'Petrol']).reshape(1,5)))

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.1,random_state=np.argmax(scores))
lr=LinearRegression()
pipe=make_pipeline(column_trans,lr)
pipe.fit(X_train,y_train)
y_pred=pipe.predict(X_test)
r2_score(y_test,y_pred)

import pickle

pickle.dump(pipe,open('LinearRegressionModel.pkl','wb'))

pipe.predict(pd.DataFrame(columns=['name','company','year','kms_driven','fuel_type'],data=np.array(['Maruti Suzuki Swift','Maruti',2019,100,'Petrol']).reshape(1,5)))

pipe.steps[0][1].transformers[0][1].categories[0]


from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f"MAE: {mae}")
print(f"MSE: {mse}")
print(f"RMSE: {rmse}")
print(f"RÂ² Score: {r2}")
